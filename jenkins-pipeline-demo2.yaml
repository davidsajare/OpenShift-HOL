kind: "BuildConfig"
apiVersion: build.openshift.io/v1
metadata:
  name: "jenkins-pipeline-demo"
spec:
  triggers:
  - github:
      secret: 5Mlic4Le
    type: GitHub
  - generic:
      secret: FiArdDBH
    type: Generic
  strategy:
    type: "JenkinsPipeline"
    jenkinsPipelineStrategy:
      jenkinsfile: |
        // Set project names
        def USERID     = "user9"
        def devProj    = "$USERID-pipeline-dev"
        def testProj   = "$USERID-pipeline-test"
        def prodProj   = "$USERID-pipeline-prod"
        def svc_name   = "myapp"
        pipeline {
          agent any
          stages{
            stage("Build"){
              steps{
                echo '*** Build Starting ***'
                script{
                  openshift.withCluster() {
                    openshift.withProject("${devProj}") {
                      openshift.selector('bc', 'myapp').startBuild("--wait").logs('-f')
                    }
                  }
                echo '*** Build Complete ***'
                }
              }
            }
            stage ("Deploy and Verify in Development Env") {
              steps{
                echo '*** Deployment Starting ***'
                script{
                  openshift.withCluster() {
                    openshift.withProject("${devProj}") {
                      // Deploy the myapp application in the devProject
                      openshift.selector('dc', 'myapp').rollout().latest();
                      // Wait for application to be deployed
                      def dc = openshift.selector("dc", "myapp").object()
                      while (dc.spec.replicas != dc.status.availableReplicas) {
                        sleep 1
                      }
                    }
                  }
                }
                echo '*** Deployment Complete ***'
                echo '*** Service Verification Starting ***'
                script{
                  openshift.withCluster() {
                    openshift.withProject("${devProj}") {
                      def connected = openshift.verifyService("${svc_name}")
                      if (connected) {
                        echo "Able to connect to ${svc_name}"
                      } else {
                        echo "Unable to connect to ${svc_name}"
                      }
                      
                      openshift.tag("${devProj}/myapp:latest", "${devProj}/myapp:testready")
                    }
                  }
                }
                echo '*** Service Verification Complete ***'
              }
            }
            stage ('Deploy and Test in Testing Env') {
              steps{
                echo "*** Deploy testready build in pipeline-test-${USERID} project  ***"
                script {
                  openshift.withCluster() {
                    openshift.withProject("${testProj}") {
                      // Deploy the myapp application in the testProject
                      openshift.selector('dc', 'myapp').rollout().latest();
                      // Wait for application to be deployed
                      def dc = openshift.selector("dc", "myapp").object()
                      while (dc.spec.replicas != dc.status.availableReplicas) {
                        sleep 1
                      }
                      // curl the testProject route to get cats
                      //def route = openshift.selector("route", "myapp").object()
                      //def the_route = "${route.spec.host}"
                      //echo "route: ${the_route}"
                      //sh "curl -s http://${the_route}/item.php"
                    }
                  }
                }
              }
            }
            stage ('Promote and Verify in Production Env') {
              steps{
                echo '*** Waiting for Input ***'
                script{
                  openshift.withCluster() {
                    openshift.withProject("${prodProj}") {
                      input message: 'Should we deploy to Production?', ok: "Promote"
                      openshift.tag("${devProj}/myapp:testready", "${devProj}/myapp:prodready")
                      echo '*** Deploying to Production ***'
                      def dc = openshift.selector("dc", "myapp").object()
                      while (dc.spec.replicas != dc.status.availableReplicas) {
                        sleep 1
                      }
                      //sleep 10
                      // test route
                      //def route = openshift.selector("route", "myapp").object()
                      //def the_route = "${route.spec.host}"
                      //echo "route: ${the_route}"
                      //sh "curl -s http://${the_route}/item.php | grep -q cats"
                    }
                  }
                }
              }
            }
          }
        }
